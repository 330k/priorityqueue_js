{"name":"Priorityqueue js","tagline":"JavaScript Priority Queue (Heap) Implementation","body":"# priorityqueue_js\r\nSimple JavaScript Priority Queue (Heap) Implementation\r\n\r\n* binary_heap: http://330k.github.io/priorityqueue_js/binary_heap.js\r\n* d_ary_heap: http://330k.github.io/priorityqueue_js/d_ary_heap.js\r\n* fibonacci_heap: http://330k.github.io/priorityqueue_js/fibonacci_heap.js\r\n* leftist_heap: http://330k.github.io/priorityqueue_js/leftist_heap.js\r\n* pairing_heap: http://330k.github.io/priorityqueue_js/pairing_heap.js\r\n* skew_heap: http://330k.github.io/priorityqueue_js/skew_heap.js\r\n\r\n# Usage\r\n1. Load .js (e.g. binary_heap.js, pairing_heap.js)\r\n2. create priority queue object by calling function (e.g. `binary_heap()`, `pairing_heap()`)\r\n3. call `enqueue` method to add data with priority: 1st argument is priority, 2nd argument can be any JS object.\r\n4. call `dequeue` method to retrieve data with largest priority.\r\n\r\n# Example: Binary Heap\r\n    <script type=\"text/javascript\" src=\"//330k.github.io/priorityqueue_js/binary_heap.js\"></script>\r\n    <script type=\"text/javascript\">\r\n      var queue = binary_heap();\r\n      queue.enqueue(3, \"data1\");\r\n      queue.enqueue(1, \"data2\");\r\n      queue.enqueue(2, \"data3\");\r\n      console.log(queue.dequeue());  // data1\r\n      console.log(queue.dequeue());  // data3\r\n      console.log(queue.dequeue());  // data2\r\n    </script>\r\n  \r\n# Benchmark\r\nvisit http://330k.github.io/priorityqueue_js/benchmark.js\r\n\r\nbinary heap, d-ary heap and pairing heap scores good performance stably.\r\n","google":"UA-71005141-3","note":"Don't delete this file! It's used internally to help with page regeneration."}